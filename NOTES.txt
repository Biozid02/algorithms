# ------------------------------------------------------------------- #
#                                                                     #
#                  Algorithms and Data Structures                     #
#                                                                     #
# --------------------------------------------------------------------#

by John Shiver
   johneshiver@gmail.com


# ---------------------------  Arrays  ------------------------------ #

Methods
  -

Advantages
  - Sorted arrays support binary search and logarithmic query times

Disadvantages
  - linear time update

#---------------------------------------------------------------------#


# -------------------------  Linked List ---------------------------- #

Methods
  get(): Gets an element
         O(n)

  add(): Adds element to end of list
         O(1)

  insert(i): Inserts element and index i
             O(n)

  delete(): Removes element from list
            O(1)

Advantages
  - for unsorted doubly-linked lists, insertion and deletion is O(1) time

Disadvantages
  - search takes O(n) time in work case

# ------------------------------------------------------------------- #


# ---------------------------  Trees  ------------------------------- #



                                   a
                                  / \
                                 /   \
                                /     \
                               /       \
                               b       c
                              / \     / \
                             /   \   /   \
                             d   e   f   g
                            / \ / \ / \ / \
                            h i j k l m n o



Methods
  get(): Gets element in tree
         O(h) -> h is height of the tree

  insert(): only one place to insert, the root node
            O(h) + O(1) -> insertion takes O(1) after position is found

  remove(): removes element in tree
            O(h) + O(1)

Advantages
  - All three methods are O(h)

Disadvantages
  -

Terms:
  "rooted binary tree": cosists of node called "root", together with two
                        rooted binary trees called left and right subtrees

                      - order among "brother" nodes matters in rooted trees,
                        so left is different than right

  "binary search tree": labels each node in a binary tree with a single key
                        such that for any node labled x, all nodes left
                        subtree of x have keys < x while all nodes right
                        subtree of x have keys > x.

                      - for any binary tree on n nodes, and any set
                        of n keys, there is 'exactly' one labeling that
                        makes it a binary search tree.

Notes:

 - The smallest height we can hope for is when the tree is perfectly balanced
 -

#---------------------------------------------------------------------#
